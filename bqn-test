#!/usr/bin/env bqn

⟨Green, Yellow, Red⟩ ⇐ •Import "../bqn-color/color.bqn"
s ⇐ •Import "../bqn-code/lib/string.bqn"

nl ← @+10

title ← {
    c ← Green‿Yellow‿Red # colors
    d ← "·∘○"            # dots
    nl∾(∾c{𝕎𝕩}¨d)∾Green " bqn-test "∾(∾c{𝕎𝕩}¨○⌽d)∾nl
}

ListRecursiveFiles ← {
    l ← •file.List 𝕩             # files/directories
    P ← (𝕩∾"/")⊸∾                # prefix
    m ← 'd'=•file.Type¨P¨l       # mask
    d ← l/˜m                     # directories
    f ← l/˜((∨´1↓".bqn"⊸⍷)¨l)∧¬m # file
    (P¨f) ∾ ∾𝕊¨P¨d
}

TestSingleFile ← {
    l   ← •file.Lines 𝕩                 # lines
    t   ← "UnitTest"                    # target
    r   ← "UnitTestActual"              # replace
    r2  ← "ExecuteHalf"                 # replace 2
    m   ← {⊑0∾˜t⍷𝕩}¨l                   # mask for unit tests
    Ts  ← (¬·∨`'≡'⊸=)⊸/¨⌾(m⊸/)          # trim suffix
    mf  ← s.Unlines    t‿r ⊸s.Replace¨l # modded file
    mf2 ← s.Unlines Ts t‿r2⊸s.Replace¨l # modded file 2
    Op  ← {s.Unwords ¯1↓"≡" s.Split t‿r2 s.Replace 𝕩}
    u   ← {s.Unwords 1↓s.Words𝕩}¨l/˜m # unit tests
    o   ← "_temp"
    o •file.Chars ""
    •BQN mf
    f   ← 𝕨⊏""‿(𝕩∾" summary: ") # file name
    res ← 'x'=•file.Chars o     # results
    ft  ← (nl⊸∾¨u)/˜¬res        # failing tests
    o •file.Chars ""
    •BQN mf2
    res2 ← 1↓•file.Lines o
    curr ← res2/˜¬res # current results
    •file.Remove o
    ∾f∾∾(res⊏⟨Red "○",Green "∘"⟩)∾((Red¨ft)⋈¨(" currently: "⊸∾∘Yellow¨curr))∾((¬𝕨)∧×≠ft)⊏""‿nl
}

IncludesUnitTest ← { ∨´(∨´"UnitTest"⊸⍷)¨(¬·∨´"⇐"⊸⍷)¨⊸/•file.Lines𝕩 }

main ← {
    •Out title
    (Red "Must provide directory (`pwd` for current)") ! 0≠≠•args
    d ← 0⊑•args  # directory
    v ← 1<≠•args # verbose
    { v ? (Red "2nd argument must be '-v' (if specified)") ! "-v"≡⊑1⊏•args ; ∞ }
    out ← v⊸TestSingleFile¨∧IncludesUnitTest¨⊸/ListRecursiveFiles d
    { v ? •Out¨ out ; •Out ∾out }
    •Out ⟨⟩
}

main
